24:1-24:5::CodeBlock.main :: "(GHC.Types.IO ())"
25:3-25:4::r :: "(GHC.IORef.IORef GHC.Types.Int)"
25:12-25:20::_ :: "GHC.Types.Int -> (GHC.Types.IO (GHC.IORef.IORef GHC.Types.Int))"
25:21-25:22::lq_anf__dpDb :: "{v : GHC.Types.Int | v == (0 : int)}"
26:3-26:8::tpltF :: "[GHC.Types.Char]"
26:12-26:24::CodeBlock.templateFile :: "{v : (GHC.Types.IO [GHC.Types.Char]) | v == CodeBlock.templateFile}"
27:3-27:7::tplt :: "Data.Text.Internal.Text"
27:12-27:24::_ :: "[GHC.Types.Char] -> (GHC.Types.IO Data.Text.Internal.Text)"
27:25-27:30::tpltF :: "{v : [GHC.Types.Char] | len v >= 0 && v == tpltF}"
28:3-28:15::_ :: "(Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)) -> (GHC.Types.IO ())"
28:17-28:24::_ :: "Data.Text.Internal.Text -> (GHC.IORef.IORef GHC.Types.Int) -> Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
28:25-28:29::tplt :: "{v : Data.Text.Internal.Text | v == tplt}"
28:30-28:31::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
31:1-31:13::CodeBlock.templateFile :: "(GHC.Types.IO [GHC.Types.Char])"
32:3-32:5::fo :: "(Data.Maybe.Maybe [GHC.Types.Char])"
32:9-32:15::_ :: "[GHC.Types.Char] -> (GHC.Types.IO (Data.Maybe.Maybe [GHC.Types.Char]))"
32:16-32:37::lq_anf__dpCu :: "{v : [GHC.Types.Char] | len v >= 0}"
33:8-33:10::_ :: "{v : (Data.Maybe.Maybe [GHC.Types.Char]) | v == fo}"
34:16-34:22::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
34:23-34:48::lq_anf__dpCx :: "{v : [GHC.Types.Char] | len v >= 0}"
35:16-35:22::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
35:23-35:24::f :: "{v : [GHC.Types.Char] | len v >= 0 && v == f}"
39:1-39:8::CodeBlock.txBlock :: "Data.Text.Internal.Text -> (GHC.IORef.IORef GHC.Types.Int) -> Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
39:9-39:10::t :: "Data.Text.Internal.Text"
39:11-39:12::r :: "(GHC.IORef.IORef GHC.Types.Int)"
39:13-39:14::z :: "Text.Pandoc.Definition.Block"
40:22-40:32::_ :: "[GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
40:33-40:36::str :: "{v : [GHC.Types.Char] | len v >= 0 && v == str}"
41:5-41:11::lq_anf__dpCM :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
41:12-41:13::_ :: "(Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)) -> Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
41:14-41:23::_ :: "([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])]) -> [GHC.Types.Char] -> Text.Pandoc.Definition.Block"
41:24-41:42::lq_anf__dpCS :: "([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])])"
41:25-41:27::lq_anf__dpCN :: "{v : [GHC.Types.Char] | (null v <=> true) && len v == 0 && v == GHC.Types.[] && len v >= 0}"
41:29-41:37::lq_anf__dpCQ :: "{v : [[GHC.Types.Char]] | (null v <=> false) && len v >= 0}"
41:30-41:36::lq_anf__dpCO :: "{v : [GHC.Types.Char] | len v >= 0}"
41:39-41:41::lq_anf__dpCR :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | (null v <=> true) && len v == 0 && v == GHC.Types.[] && len v >= 0}"
41:43-41:51::contents :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents}"
44:5-44:11::_ :: "[[GHC.Types.Char]] -> GHC.Types.Bool"
44:12-44:19::classes :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == classes}"
45:5-45:13::_ :: "Data.Text.Internal.Text -> (GHC.IORef.IORef GHC.Types.Int) -> GHC.Types.Bool -> [GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
45:14-45:15::t :: "{v : Data.Text.Internal.Text | v == t}"
45:16-45:17::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
45:18-45:23::GHC.Types.False :: "{v : GHC.Types.Bool | not (Prop v) && v == GHC.Types.False}"
45:24-45:32::contents :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents}"
48:22-48:35::_ :: "[GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
48:36-48:39::str :: "{v : [GHC.Types.Char] | len v >= 0 && v == str}"
49:5-49:13::_ :: "Data.Text.Internal.Text -> (GHC.IORef.IORef GHC.Types.Int) -> GHC.Types.Bool -> [GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
49:14-49:15::t :: "{v : Data.Text.Internal.Text | v == t}"
49:16-49:17::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
49:18-49:22::GHC.Types.True :: "{v : GHC.Types.Bool | Prop v && v == GHC.Types.True}"
49:23-49:31::contents :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents}"
52:5-52:11::_ :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
52:12-52:13::z :: "{v : Text.Pandoc.Definition.Block | v == z}"
54:1-54:7::CodeBlock.isCode :: "[[GHC.Types.Char]] -> GHC.Types.Bool"
54:12-54:21::lq_anf__dpCz :: "{v : [GHC.Types.Char] | len v >= 0}"
54:22-54:28::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Types.Bool"
56:1-56:11::CodeBlock.isSpecCode :: "[GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
56:12-56:15::str :: "[GHC.Types.Char]"
57:5-57:7::_ :: "{v : GHC.Types.Bool | v == ok}"
57:23-57:27::lq_anf__dpCa :: "x1:[GHC.Types.Char] -> {v : (Data.Maybe.Maybe [GHC.Types.Char]) | fromJust v == x1 && (isJust v <=> true) && v == Data.Maybe.Just x1}"
57:28-57:29::_ :: "([GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])) -> [GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
57:30-57:37::_ :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
57:38-57:41::ls' :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls'}"
58:23-58:30::_ :: "{v : (Data.Maybe.Maybe [GHC.Types.Char]) | (isJust v <=> false) && v == Data.Maybe.Nothing}"
60:5-60:7::ls :: "[[GHC.Types.Char]]"
60:23-60:28::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
60:29-60:32::str :: "{v : [GHC.Types.Char] | len v >= 0 && v == str}"
61:6-61:8::c1 :: "[GHC.Types.Char]"
61:10-61:13::ls' :: "[[GHC.Types.Char]]"
61:16-61:19::c1' :: "[GHC.Types.Char]"
61:23-61:27::_ :: "x1:{v : [[GHC.Types.Char]] | 2 <= len v} -> ([GHC.Types.Char], {v : [[GHC.Types.Char]] | len v == len x1 - 2}, [GHC.Types.Char])"
61:28-61:30::ls :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls}"
62:5-62:7::ok :: "GHC.Types.Bool"
62:23-62:24::lq_anf__dpC5 :: "{v : GHC.Types.Int | v == (2 : int)}"
62:25-62:27::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 <= x2}"
62:28-62:34::_ :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
62:35-62:37::ls :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls}"
62:38-62:40::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
62:41-62:52::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool"
62:53-62:55::c1 :: "{v : [GHC.Types.Char] | len v >= 0 && v == c1}"
62:56-62:59::c1' :: "{v : [GHC.Types.Char] | len v >= 0 && v == c1'}"
65:1-65:14::CodeBlock.isCommentCode :: "[GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
65:15-65:18::str :: "[GHC.Types.Char]"
66:5-66:7::_ :: "{v : GHC.Types.Bool | v == ok}"
66:23-66:27::lq_anf__dpBX :: "x1:[GHC.Types.Char] -> {v : (Data.Maybe.Maybe [GHC.Types.Char]) | fromJust v == x1 && (isJust v <=> true) && v == Data.Maybe.Just x1}"
66:28-66:29::_ :: "([GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])) -> [GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
66:30-66:37::_ :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
66:38-66:42::ls'' :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls''}"
67:23-67:30::_ :: "{v : (Data.Maybe.Maybe [GHC.Types.Char]) | (isJust v <=> false) && v == Data.Maybe.Nothing}"
69:5-69:7::ls :: "[[GHC.Types.Char]]"
69:23-69:28::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
69:29-69:32::str :: "{v : [GHC.Types.Char] | len v >= 0 && v == str}"
70:6-70:8::c1 :: "{VV : [GHC.Types.Char] | VV == c1 && len VV == len c1 && len VV >= 0}"
70:10-70:13::ls' :: "{VV : [[GHC.Types.Char]] | len VV == len ls - 2 && VV /= ls && VV == fix && len VV < len ls && len VV == len fix && len VV >= 0}"
70:16-70:19::c1' :: "{VV : [GHC.Types.Char] | VV == fix && len VV == len fix && len VV >= 0}"
70:23-70:27::_ :: "x1:{v : [{v : [GHC.Types.Char] | len v >= 0}] | 2 <= len v} -> ({v : [GHC.Types.Char] | len v >= 0}, {v : [{v : [GHC.Types.Char] | len v >= 0}] | len v == len x1 - 2}, {v : [GHC.Types.Char] | len v >= 0})"
70:28-70:30::ls :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls}"
71:6-71:8::c2 :: "[GHC.Types.Char]"
71:10-71:14::ls'' :: "[[GHC.Types.Char]]"
71:16-71:19::c2' :: "[GHC.Types.Char]"
71:23-71:27::_ :: "x1:{v : [[GHC.Types.Char]] | 2 <= len v} -> ([GHC.Types.Char], {v : [[GHC.Types.Char]] | len v == len x1 - 2}, [GHC.Types.Char])"
71:28-71:31::ls' :: "{v : [[GHC.Types.Char]] | len v == len ls - 2 && v /= ls && v == fix && len v < len ls && len v == len fix && len v >= 0 && len v >= 0 && v == ls'}"
72:5-72:7::ok :: "GHC.Types.Bool"
72:23-72:24::lq_anf__dpBQ :: "{v : GHC.Types.Int | v == (4 : int)}"
72:25-72:27::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 <= x2}"
72:28-72:34::_ :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
72:35-72:37::ls :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == ls}"
72:38-72:40::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
72:41-72:55::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool"
72:56-72:58::c1 :: "{v : [GHC.Types.Char] | v == c1 && len v == len c1 && len v >= 0 && len v >= 0 && v == c1}"
72:59-72:62::c1' :: "{v : [GHC.Types.Char] | v == fix && len v == len fix && len v >= 0 && len v >= 0 && v == c1'}"
72:63-72:65::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
72:66-72:77::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool"
72:78-72:80::c2 :: "{v : [GHC.Types.Char] | len v >= 0 && v == c2}"
72:81-72:84::c2' :: "{v : [GHC.Types.Char] | len v >= 0 && v == c2'}"
74:1-74:12::CodeBlock.isSpecBlock :: "(Data.String.IsString [b], Data.String.IsString [a], GHC.Classes.Eq b, GHC.Classes.Eq a) =>\n[a] -> [b] -> GHC.Types.Bool"
74:16-74:17::c :: "[a]"
74:18-74:20::c' :: "[a]"
74:23-74:33::_ :: "[a] -> [a] -> GHC.Types.Bool"
74:34-74:49::lq_anf__dpBz :: "{v : [a] | len v >= 0}"
74:50-74:51::c :: "{v : [a] | len v >= 0 && v == c}"
74:55-74:57::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
74:58-74:68::_ :: "[a] -> [a] -> GHC.Types.Bool"
74:69-74:82::lq_anf__dpBC :: "{v : [a] | len v >= 0}"
74:86-74:88::c' :: "{v : [a] | len v >= 0 && v == c'}"
75:1-75:15::CodeBlock.isCommentBlock :: "(Data.String.IsString [b], Data.String.IsString [a], GHC.Classes.Eq b, GHC.Classes.Eq a) =>\n[a] -> [b] -> GHC.Types.Bool"
75:16-75:17::c :: "[a]"
75:18-75:20::c' :: "[a]"
75:23-75:33::_ :: "[a] -> [a] -> GHC.Types.Bool"
75:34-75:52::lq_anf__dpBt :: "{v : [a] | len v >= 0}"
75:53-75:54::c :: "{v : [a] | len v >= 0 && v == c}"
75:55-75:57::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
75:58-75:68::_ :: "[a] -> [a] -> GHC.Types.Bool"
75:69-75:85::lq_anf__dpBw :: "{v : [a] | len v >= 0}"
75:86-75:88::c' :: "{v : [a] | len v >= 0 && v == c'}"
76:1-76:12::CodeBlock.isCodeBlock :: "(Data.String.IsString [b], Data.String.IsString [a], GHC.Classes.Eq b, GHC.Classes.Eq a) =>\n[a] -> [b] -> GHC.Types.Bool"
76:16-76:17::c :: "[a]"
76:18-76:20::c' :: "[a]"
76:23-76:33::_ :: "[a] -> [a] -> GHC.Types.Bool"
76:34-76:49::lq_anf__dpBn :: "{v : [a] | len v >= 0}"
76:50-76:51::c :: "{v : [a] | len v >= 0 && v == c}"
76:55-76:57::_ :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop x2}"
76:58-76:68::_ :: "[a] -> [a] -> GHC.Types.Bool"
76:69-76:82::lq_anf__dpBq :: "{v : [a] | len v >= 0}"
76:86-76:88::c' :: "{v : [a] | len v >= 0 && v == c'}"
79:1-79:5::CodeBlock.snip :: "x1:{v : [a] | 2 <= len v} -> (a, {v : [a] | len v == len x1 - 2}, a)"
79:16-79:36::GHC.Tuple.(,,) :: "x1:a -> x2:{VV : b | true} -> x3:{VV : c | true} -> {v : (a, b, c) | x_Tuple33 v == x3 && x_Tuple32 v == x2 && x_Tuple31 v == x1 && v == GHC.Tuple.(,,) x1 x2 x3}"
79:17-79:18::x :: "{VV : a | VV == x}"
79:20-79:27::_ :: "x1:[a] -> {v : [a] | len v == len x1}"
79:28-79:31::xs' :: "{v : [a] | v /= xs && v == fix && len v < len xs && len v == len fix && len v >= 0 && len v >= 0 && v == xs'}"
79:33-79:35::x' :: "{VV : a | VV == fix && VV == x'}"
81:5-81:7::x' :: "{VV : a | VV == fix}"
81:8-81:11::xs' :: "{VV : [a] | VV /= xs && VV == fix && len VV < len xs && len VV == len fix && len VV >= 0}"
81:16-81:18::_ :: "x1:{v : [a] | len v > 0 && len v == len xs} -> ({VV : a | VV == fst x11}, {v : [a] | v == snd x11 && v /= x1 && len v < len x1 && len v < len xs && len v >= 0})"
81:20-81:27::_ :: "x1:[a] -> {v : [a] | len v == len x1}"
81:28-81:30::xs :: "{v : [a] | len v >= 0 && v == xs}"
82:4-82:6::fs :: "x1:{VV : [a] | len VV > 0 && len VV == len xs} -> ({VV : a | VV == fst VV}, {VV : [a] | VV == snd VV && VV /= x1 && len VV < len x1 && len VV < len xs && len VV >= 0})"
82:16-82:23::GHC.Tuple.(,) :: "x1:a -> x2:{VV : b | true} -> {v : (a, b) | snd v == x2 && fst v == x1 && x_Tuple22 v == x2 && x_Tuple21 v == x1 && v == GHC.Tuple.(,) x1 x2}"
82:17-82:18::x :: "{VV : a | VV == x}"
82:20-82:22::xs :: "{v : [a] | len v >= 0 && v == xs}"
84:1-84:9::CodeBlock.makeHtml :: "Data.Text.Internal.Text -> (GHC.IORef.IORef GHC.Types.Int) -> GHC.Types.Bool -> [GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
84:10-84:11::t :: "Data.Text.Internal.Text"
84:12-84:13::r :: "(GHC.IORef.IORef GHC.Types.Int)"
84:14-84:18::hide :: "GHC.Types.Bool"
84:19-84:27::contents :: "[GHC.Types.Char]"
85:8-85:9::n :: "GHC.Types.Int"
85:13-85:21::_ :: "(GHC.IORef.IORef GHC.Types.Int) -> (GHC.Types.IO GHC.Types.Int)"
85:22-85:23::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
86:12-86:21::contents' :: "[GHC.Types.Char]"
86:25-86:28::_ :: "Data.Text.Internal.Text -> GHC.Types.Int -> [GHC.Types.Char] -> [GHC.Types.Char]"
86:29-86:30::t :: "{v : Data.Text.Internal.Text | v == t}"
86:31-86:32::n :: "{v : GHC.Types.Int | v == n}"
86:33-86:41::contents :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents}"
87:12-87:22::contents'' :: "[GHC.Types.Char]"
87:29-87:33::_ :: "{v : GHC.Types.Bool | v == hide}"
87:39-87:47::CodeBlock.wrapHide :: "[GHC.Types.Char] -> [GHC.Types.Char]"
87:53-87:55::GHC.Base.id :: "x1:a -> {VV : a | VV == x1}"
87:57-87:66::contents' :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents'}"
88:8-88:14::lq_anf__dpCp :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
88:15-88:16::_ :: "(Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)) -> Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
88:17-88:25::_ :: "Text.Pandoc.Definition.Format -> [GHC.Types.Char] -> Text.Pandoc.Definition.Block"
88:27-88:33::_ :: "[GHC.Types.Char] -> Text.Pandoc.Definition.Format"
88:34-88:40::lq_anf__dpCq :: "{v : [GHC.Types.Char] | len v >= 0}"
88:42-88:52::contents'' :: "{v : [GHC.Types.Char] | len v >= 0 && v == contents''}"
91:1-91:9::CodeBlock.wrapHide :: "[GHC.Types.Char] -> [GHC.Types.Char]"
91:10-91:11::s :: "[GHC.Types.Char]"
91:14-91:21::_ :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
91:22-91:61::lq_anf__dpBd :: "{v : [[GHC.Types.Char]] | (null v <=> false) && len v >= 0}"
91:23-91:47::lq_anf__dpB8 :: "{v : [GHC.Types.Char] | len v >= 0}"
91:49-91:50::s :: "{v : [GHC.Types.Char] | len v >= 0 && v == s}"
91:52-91:60::lq_anf__dpB9 :: "{v : [GHC.Types.Char] | len v >= 0}"
93:1-93:9::CodeBlock.getCount :: "(GHC.Num.Num a) => (GHC.IORef.IORef a) -> (GHC.Types.IO a)"
93:10-93:11::r :: "(GHC.IORef.IORef a)"
94:3-94:4::n :: "a"
94:8-94:17::_ :: "(GHC.IORef.IORef a) -> (GHC.Types.IO a)"
94:18-94:19::r :: "{v : (GHC.IORef.IORef a) | v == r}"
95:3-95:13::_ :: "(GHC.IORef.IORef a) -> a -> (GHC.Types.IO ())"
95:14-95:15::r :: "{v : (GHC.IORef.IORef a) | v == r}"
95:17-95:18::n :: "{VV : a | VV == n}"
95:18-95:19::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
95:19-95:20::lq_anf__dpB3 :: "a"
96:3-96:9::_ :: "a -> (GHC.Types.IO a)"
96:10-96:11::n :: "{VV : a | VV == n}"
99:1-99:4::CodeBlock.pad :: "Data.Text.Internal.Text -> GHC.Types.Int -> [GHC.Types.Char] -> [GHC.Types.Char]"
99:5-99:9::tplt :: "Data.Text.Internal.Text"
99:10-99:11::n :: "GHC.Types.Int"
99:12-99:13::s :: "[GHC.Types.Char]"
99:18-99:26::Data.Text.Lazy.unpack :: "Data.Text.Internal.Lazy.Text -> [GHC.Types.Char]"
99:27-99:28::_ :: "(Data.Text.Internal.Lazy.Text -> [GHC.Types.Char]) -> Data.Text.Internal.Lazy.Text -> [GHC.Types.Char]"
99:29-99:39::_ :: "Data.Text.Internal.Text -> (Data.Text.Internal.Text -> Data.Text.Internal.Text) -> Data.Text.Internal.Lazy.Text"
99:40-99:44::tplt :: "{v : Data.Text.Internal.Text | v == tplt}"
99:45-99:48::ctx :: "Data.Text.Internal.Text -> Data.Text.Internal.Text"
101:5-101:7::tn :: "Data.Text.Internal.Text"
101:18-101:24::Data.Text.pack :: "[GHC.Types.Char] -> Data.Text.Internal.Text"
101:25-101:26::_ :: "([GHC.Types.Char] -> Data.Text.Internal.Text) -> [GHC.Types.Char] -> Data.Text.Internal.Text"
101:27-101:31::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
101:32-101:33::n :: "{v : GHC.Types.Int | v == n}"
102:5-102:7::ts :: "Data.Text.Internal.Text"
102:18-102:24::Data.Text.pack :: "[GHC.Types.Char] -> Data.Text.Internal.Text"
102:25-102:26::_ :: "([GHC.Types.Char] -> Data.Text.Internal.Text) -> [GHC.Types.Char] -> Data.Text.Internal.Text"
102:27-102:33::prefix :: "{v : [GHC.Types.Char] | (null v <=> true) && len v == 0 && v == GHC.Types.[] && len v >= 0 && v == prefix}"
102:34-102:36::_ :: "x1:[GHC.Types.Char] -> x2:[GHC.Types.Char] -> {v : [GHC.Types.Char] | len v == len x1 + len x2}"
102:37-102:38::s :: "{v : [GHC.Types.Char] | len v >= 0 && v == s}"
103:5-103:11::prefix :: "{v : [GHC.Types.Char] | (null v <=> true) && len v == 0 && v == GHC.Types.[]}"
103:18-103:20::_ :: "{v : [GHC.Types.Char] | (null v <=> true) && len v == 0 && v == GHC.Types.[]}"
106:5-106:8::ctx :: "Data.Text.Internal.Text -> Data.Text.Internal.Text"
106:18-106:20::ts :: "{v : Data.Text.Internal.Text | v == ts}"
107:18-107:20::tn :: "{v : Data.Text.Internal.Text | v == tn}"
108:18-108:19::_ :: "Data.Text.Internal.Text"
114:1-114:10::CodeBlock.doInclude :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
114:11-114:13::cb :: "Text.Pandoc.Definition.Block"
115:8-115:14::_ :: "[GHC.Types.Char] -> [([GHC.Types.Char], [GHC.Types.Char])] -> (Data.Maybe.Maybe [GHC.Types.Char])"
115:15-115:24::lq_anf__dpDk :: "{v : [GHC.Types.Char] | len v >= 0}"
115:25-115:33::namevals :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | len v >= 0 && v == namevals}"
116:22-116:28::lq_anf__dpDn :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
116:29-116:30::_ :: "{xcmp :: [GHC.Types.Char], wcmp :: Text.Pandoc.Definition.Block |- (GHC.Types.IO Text.Pandoc.Definition.Block) <: (GHC.Types.IO Text.Pandoc.Definition.Block)} =>\n(Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)) -> ([GHC.Types.Char] -> Text.Pandoc.Definition.Block) -> [GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
116:32-116:41::_ :: "([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])]) -> [GHC.Types.Char] -> Text.Pandoc.Definition.Block"
116:42-116:65::lq_anf__dpDo :: "{v : ([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])]) | x_Tuple33 v == namevals && x_Tuple32 v == classes && x_Tuple31 v == id && v == GHC.Tuple.(,,) id classes namevals}"
116:43-116:45::id :: "{v : [GHC.Types.Char] | len v >= 0 && v == id}"
116:47-116:54::classes :: "{v : [[GHC.Types.Char]] | len v >= 0 && v == classes}"
116:56-116:64::namevals :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | len v >= 0 && v == namevals}"
116:67-116:70::_ :: "([GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block)) -> (GHC.Types.IO [GHC.Types.Char]) -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
116:71-116:79::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
116:80-116:81::f :: "{v : [GHC.Types.Char] | len v >= 0 && v == f}"
117:22-117:28::_ :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
117:29-117:31::lq_anf__dpDi :: "{v : Text.Pandoc.Definition.Block | v == cb}"
118:15-118:21::_ :: "Text.Pandoc.Definition.Block -> (GHC.Types.IO Text.Pandoc.Definition.Block)"
118:22-118:23::cb :: "{v : Text.Pandoc.Definition.Block | v == cb}"