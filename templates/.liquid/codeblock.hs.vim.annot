25:1-25:5::CodeBlock.main :: "(GHC.Types.IO ())"
25:11-25:12::r :: "(GHC.IORef.IORef GHC.Types.Int)"
25:20-25:28::_ :: "GHC.Types.Int -> (GHC.Types.IO (GHC.IORef.IORef GHC.Types.Int))"
25:29-25:30::lq_anf__dpgL :: "{v : GHC.Types.Int | v == (0  :  int)}"
26:11-26:16::tpltF :: "[GHC.Types.Char]"
26:20-26:32::CodeBlock.templateFile :: "{v : (GHC.Types.IO [GHC.Types.Char]) | v == CodeBlock.templateFile}"
27:11-27:15::tplt :: "Data.Text.Internal.Text"
27:20-27:32::_ :: "[GHC.Types.Char] -> (GHC.Types.IO Data.Text.Internal.Text)"
27:33-27:38::tpltF :: "{v : [GHC.Types.Char] | v == tpltF && len v >= 0}"
28:11-28:23::_ :: "(Text.Pandoc.Definition.Block\n -> (GHC.Types.IO Text.Pandoc.Definition.Block))\n-> (GHC.Types.IO ())"
28:25-28:32::_ :: "Data.Text.Internal.Text\n-> (GHC.IORef.IORef GHC.Types.Int)\n-> Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
28:33-28:37::tplt :: "{v : Data.Text.Internal.Text | v == tplt}"
28:38-28:39::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
31:1-31:13::CodeBlock.templateFile :: "(GHC.Types.IO [GHC.Types.Char])"
32:3-32:5::fo :: "(Data.Maybe.Maybe [GHC.Types.Char])"
32:9-32:15::_ :: "[GHC.Types.Char]\n-> (GHC.Types.IO (Data.Maybe.Maybe [GHC.Types.Char]))"
32:16-32:37::lq_anf__dpgc :: "{v : [GHC.Types.Char] | len v >= 0}"
33:8-33:10::_ :: "{v : (Data.Maybe.Maybe [GHC.Types.Char]) | v == fo}"
34:16-34:22::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
34:23-34:48::lq_anf__dpgf :: "{v : [GHC.Types.Char] | len v >= 0}"
35:16-35:22::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
35:23-35:24::f :: "{v : [GHC.Types.Char] | v == f && len v >= 0}"
38:1-38:8::CodeBlock.txBlock :: "Data.Text.Internal.Text\n-> (GHC.IORef.IORef GHC.Types.Int)\n-> Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
38:9-38:10::t :: "Data.Text.Internal.Text"
38:11-38:12::r :: "(GHC.IORef.IORef GHC.Types.Int)"
39:5-39:11::_ :: "[[GHC.Types.Char]] -> GHC.Types.Bool"
39:12-39:19::classes :: "{v : [[GHC.Types.Char]] | v == classes && len v >= 0}"
40:8-40:9::n :: "GHC.Types.Int"
40:13-40:21::_ :: "(GHC.IORef.IORef GHC.Types.Int) -> (GHC.Types.IO GHC.Types.Int)"
40:22-40:23::r :: "{v : (GHC.IORef.IORef GHC.Types.Int) | v == r}"
41:12-41:21::contents' :: "[GHC.Types.Char]"
41:24-41:27::_ :: "Data.Text.Internal.Text\n-> GHC.Types.Int -> [GHC.Types.Char] -> [GHC.Types.Char]"
41:28-41:29::t :: "{v : Data.Text.Internal.Text | v == t}"
41:30-41:31::n :: "{v : GHC.Types.Int | v == n}"
41:32-41:40::contents :: "{v : [GHC.Types.Char] | v == contents && len v >= 0}"
42:8-42:14::lq_anf__dpgn :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
42:15-42:16::_ :: "(Text.Pandoc.Definition.Block\n -> (GHC.Types.IO Text.Pandoc.Definition.Block))\n-> Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
42:17-42:25::_ :: "Text.Pandoc.Definition.Format\n-> [GHC.Types.Char] -> Text.Pandoc.Definition.Block"
42:27-42:33::_ :: "[GHC.Types.Char] -> Text.Pandoc.Definition.Format"
42:34-42:40::lq_anf__dpgo :: "{v : [GHC.Types.Char] | len v >= 0}"
42:42-42:51::contents' :: "{v : [GHC.Types.Char] | v == contents' && len v >= 0}"
48:5-48:11::_ :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
48:12-48:13::ds_dpfP :: "Text.Pandoc.Definition.Block"
50:1-50:7::CodeBlock.isCode :: "[[GHC.Types.Char]] -> GHC.Types.Bool"
50:12-50:21::lq_anf__dpgh :: "{v : [GHC.Types.Char] | len v >= 0}"
50:22-50:28::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Types.Bool"
53:1-53:9::CodeBlock.getCount :: "(GHC.Num.Num a) => (GHC.IORef.IORef a) -> (GHC.Types.IO a)"
53:10-53:11::r :: "(GHC.IORef.IORef a)"
53:17-53:18::n :: "a"
53:22-53:31::_ :: "(GHC.IORef.IORef a) -> (GHC.Types.IO a)"
53:32-53:33::r :: "{v : (GHC.IORef.IORef a) | v == r}"
54:17-54:27::_ :: "(GHC.IORef.IORef a) -> a -> (GHC.Types.IO ())"
54:28-54:29::r :: "{v : (GHC.IORef.IORef a) | v == r}"
54:31-54:32::n :: "{VV : a | VV == n}"
54:32-54:33::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
54:33-54:34::lq_anf__dpfW :: "a"
55:17-55:23::_ :: "a -> (GHC.Types.IO a)"
55:24-55:25::n :: "{VV : a | VV == n}"
58:1-58:4::CodeBlock.pad :: "Data.Text.Internal.Text\n-> GHC.Types.Int -> [GHC.Types.Char] -> [GHC.Types.Char]"
58:5-58:9::tplt :: "Data.Text.Internal.Text"
58:10-58:11::n :: "GHC.Types.Int"
58:12-58:13::s :: "[GHC.Types.Char]"
58:18-58:26::Data.Text.Lazy.unpack :: "Data.Text.Internal.Lazy.Text -> [GHC.Types.Char]"
58:27-58:28::_ :: "(Data.Text.Internal.Lazy.Text -> [GHC.Types.Char])\n-> Data.Text.Internal.Lazy.Text -> [GHC.Types.Char]"
58:29-58:39::_ :: "Data.Text.Internal.Text\n-> (Data.Text.Internal.Text -> Data.Text.Internal.Text)\n-> Data.Text.Internal.Lazy.Text"
58:40-58:44::tplt :: "{v : Data.Text.Internal.Text | v == tplt}"
58:45-58:48::ctx :: "Data.Text.Internal.Text -> Data.Text.Internal.Text"
60:5-60:7::tn :: "Data.Text.Internal.Text"
60:18-60:24::Data.Text.pack :: "[GHC.Types.Char] -> Data.Text.Internal.Text"
60:25-60:26::_ :: "([GHC.Types.Char] -> Data.Text.Internal.Text)\n-> [GHC.Types.Char] -> Data.Text.Internal.Text"
60:27-60:31::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
60:32-60:33::n :: "{v : GHC.Types.Int | v == n}"
61:5-61:7::ts :: "Data.Text.Internal.Text"
61:18-61:24::Data.Text.pack :: "[GHC.Types.Char] -> Data.Text.Internal.Text"
61:25-61:26::_ :: "([GHC.Types.Char] -> Data.Text.Internal.Text)\n-> [GHC.Types.Char] -> Data.Text.Internal.Text"
61:27-61:33::prefix :: "{v : [GHC.Types.Char] | null v <=> true && v == prefix && len v == 0 && len v >= 0}"
61:34-61:36::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
61:37-61:38::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
62:5-62:11::prefix :: "{v : [GHC.Types.Char] | null v <=> true && len v == 0}"
62:18-62:20::_ :: "{v : [GHC.Types.Char] | null v <=> true && len v == 0}"
65:5-65:8::ctx :: "Data.Text.Internal.Text -> Data.Text.Internal.Text"
65:18-65:20::ts :: "{v : Data.Text.Internal.Text | v == ts}"
66:18-66:20::tn :: "{v : Data.Text.Internal.Text | v == tn}"
67:18-67:19::_ :: "Data.Text.Internal.Text"
73:1-73:10::CodeBlock.doInclude :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
73:11-73:13::cb :: "Text.Pandoc.Definition.Block"
74:8-74:14::_ :: "[GHC.Types.Char]\n-> [([GHC.Types.Char], [GHC.Types.Char])]\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
74:15-74:24::lq_anf__dpgU :: "{v : [GHC.Types.Char] | len v >= 0}"
74:25-74:33::namevals :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | v == namevals && len v >= 0}"
75:22-75:28::lq_anf__dpgX :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
75:29-75:30::_ :: "(Text.Pandoc.Definition.Block\n -> (GHC.Types.IO Text.Pandoc.Definition.Block))\n-> ([GHC.Types.Char] -> Text.Pandoc.Definition.Block)\n-> [GHC.Types.Char]\n-> exists [Text.Pandoc.Definition.Block].(GHC.Types.IO Text.Pandoc.Definition.Block)"
75:32-75:41::_ :: "([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])])\n-> [GHC.Types.Char] -> Text.Pandoc.Definition.Block"
75:42-75:65::lq_anf__dpgY :: "{v : ([GHC.Types.Char], [[GHC.Types.Char]], [([GHC.Types.Char], [GHC.Types.Char])]) | x_Tuple33 v == namevals && x_Tuple31 v == id && x_Tuple32 v == classes}"
75:43-75:45::id :: "{v : [GHC.Types.Char] | v == id && len v >= 0}"
75:47-75:54::classes :: "{v : [[GHC.Types.Char]] | v == classes && len v >= 0}"
75:56-75:64::namevals :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | v == namevals && len v >= 0}"
75:67-75:70::_ :: "([GHC.Types.Char] -> (GHC.Types.IO Text.Pandoc.Definition.Block))\n-> (GHC.Types.IO [GHC.Types.Char])\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
75:71-75:79::_ :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
75:80-75:81::f :: "{v : [GHC.Types.Char] | v == f && len v >= 0}"
76:22-76:28::_ :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
76:29-76:31::lq_anf__dpgS :: "{v : Text.Pandoc.Definition.Block | v == cb}"
77:15-77:21::_ :: "Text.Pandoc.Definition.Block\n-> (GHC.Types.IO Text.Pandoc.Definition.Block)"
77:22-77:23::cb :: "{v : Text.Pandoc.Definition.Block | v == cb}"